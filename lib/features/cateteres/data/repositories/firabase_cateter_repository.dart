import 'dart:developer';
import 'package:cloud_firestore/cloud_firestore.dart';
import '../../domain/models/cateter.dart';
import '../abstract_repositories/cateteres_repository.dart';
import '../dto/create_cateter_dto.dart';
import '../dto/update_cateter_dto.dart';

class FirebaseCateterRepository implements CateteresRepository {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  /// üî• **Obtener todos los cat√©teres en tiempo real**
  @override
  Stream<List<Cateter>> getAllCateteres() {
    // üëà Cambiado para coincidir con la interfaz
    return _firestore
        .collectionGroup(
            'cateteres') // üî• Obtiene cat√©teres de todos los ingresos
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => Cateter.fromFirestore(
                doc)) // Manejo de documentos correctamente
            .toList());
  }

  /// üî• **Registrar un nuevo cat√©ter vinculado a un ingreso**
  @override
  Future<void> createCateter(CreateCateterDto dto) async {
    try {
      await _firestore
          .collection('ingresos')
          .doc(dto.idIngreso)
          .collection('cateteres')
          .add({
        "tipo": dto.tipo,
        "sitio": dto.sitio,
        "fechaInsercion":
            Timestamp.fromDate(dto.fechaInsercion), // ‚úÖ Almacena como Timestamp
        "lugarProcedencia": dto.lugarProcedencia,
      });
      print("‚úÖ Cat√©ter agregado correctamente");
    } catch (e) {
      print("‚ùå Error al agregar cat√©ter: $e");
    }
  }

  /// üî• **Obtener los cat√©teres de un ingreso espec√≠fico en tiempo real**
  @override
  Stream<List<Cateter>> getCateteresByIngreso(String idIngreso) {
    return _firestore
        .collection('ingresos')
        .doc(idIngreso)
        .collection('cateteres')
        .orderBy('fechaInsercion', descending: true)
        .snapshots()
        .map((snapshot) {
      print(
          "üì° Actualizaci√≥n en tiempo real recibida: ${snapshot.docs.length} cat√©teres");
      return snapshot.docs.map((doc) => Cateter.fromFirestore(doc)).toList();
    });
  }

  /// üî• **Obtener un cat√©ter espec√≠fico por ID**
  @override
  Future<Cateter?> getCateterById(String idIngreso, String idCateter) async {
    try {
      final docSnapshot = await _firestore
          .collection('ingresos')
          .doc(idIngreso)
          .collection('cateteres')
          .doc(idCateter)
          .get();

      if (docSnapshot.exists) {
        return Cateter.fromFirestore(docSnapshot);
      } else {
        log("‚ö†Ô∏è No se encontr√≥ el cat√©ter con ID: $idCateter");
        return null;
      }
    } catch (e) {
      log("‚ùå Error al obtener el cat√©ter: $e");
      throw Exception('Error al obtener el cat√©ter');
    }
  }

  /// üî• **Actualizar un cat√©ter**
  @override
  Future<void> updateCateter(
      String idIngreso, String idCateter, UpdateCateterDto dto) async {
    try {
      await _firestore
          .collection('ingresos')
          .doc(idIngreso)
          .collection('cateteres')
          .doc(idCateter)
          .update(dto.toJson());
      log('‚úÖ Cat√©ter $idCateter actualizado correctamente');
    } catch (e) {
      log('‚ùå Error al actualizar el cat√©ter $idCateter: $e');
      throw Exception('Error al actualizar el cat√©ter');
    }
  }

  /// üî• **Eliminar un cat√©ter**
  @override
  Future<void> deleteCateter(String idIngreso, String idCateter) async {
    try {
      await _firestore
          .collection('ingresos')
          .doc(idIngreso)
          .collection('cateteres')
          .doc(idCateter)
          .delete();
      log('‚úÖ Cat√©ter $idCateter eliminado correctamente');
    } catch (e) {
      log('‚ùå Error al eliminar el cat√©ter $idCateter: $e');
      throw Exception('Error al eliminar el cat√©ter');
    }
  }
}
