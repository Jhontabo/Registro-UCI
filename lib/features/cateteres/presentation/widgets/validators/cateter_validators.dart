import 'package:flutter/material.dart';
import 'package:intl/intl.dart'; // âœ… Importado para el manejo de fechas

/// ðŸ”¹ Valida la fecha de colocaciÃ³n del marcapaso.
String? fechaColocacionValidator(String? value) {
  if (value == null || value.trim().isEmpty) {
    return "La fecha de colocaciÃ³n es obligatoria.";
  }
  try {
    DateFormat('yyyy-MM-dd')
        .parseStrict(value.trim()); // âœ… Verifica el formato correcto
    return null;
  } catch (_) {
    return "Ingrese una fecha vÃ¡lida (Formato: YYYY-MM-DD).";
  }
}

/// ðŸ”¹ Valida que el modo del marcapaso haya sido seleccionado.
String? modoMarcapasoValidator(String? value) {
  if (value == null || value.trim().isEmpty) {
    return "Debe seleccionar un modo de marcapaso.";
  }
  return null;
}

/// ðŸ”¹ Valida que la vÃ­a del marcapaso haya sido seleccionada.
String? viaMarcapasoValidator(String? value) {
  if (value == null || value.trim().isEmpty) {
    return "Debe seleccionar una vÃ­a de marcapaso.";
  }
  return null;
}

/// ðŸ”¹ Valida que la frecuencia sea un nÃºmero vÃ¡lido y mayor que 0.
String? frecuenciaMarcapasoValidator(String? value) {
  if (value == null || value.trim().isEmpty) {
    return "Debe ingresar una frecuencia vÃ¡lida.";
  }
  final int? frecuencia = int.tryParse(value.trim());
  if (frecuencia == null || frecuencia <= 0) {
    return "La frecuencia debe ser un nÃºmero entero positivo.";
  }
  return null;
}

/// ðŸ”¹ Valida que la sensibilidad sea un nÃºmero vÃ¡lido y mayor que 0.
String? sensibilidadMarcapasoValidator(String? value) {
  if (value == null || value.trim().isEmpty) {
    return "Debe ingresar una sensibilidad vÃ¡lida.";
  }
  final double? sensibilidad = double.tryParse(value.trim());
  if (sensibilidad == null || sensibilidad <= 0) {
    return "La sensibilidad debe ser un nÃºmero mayor a 0.";
  }
  return null;
}

/// ðŸ”¹ Valida que la salida sea un nÃºmero vÃ¡lido y mayor que 0.
String? salidaMarcapasoValidator(String? value) {
  if (value == null || value.trim().isEmpty) {
    return "Debe ingresar una salida vÃ¡lida.";
  }
  final double? salida = double.tryParse(value.trim());
  if (salida == null || salida <= 0) {
    return "La salida debe ser un nÃºmero mayor a 0.";
  }
  return null;
}
